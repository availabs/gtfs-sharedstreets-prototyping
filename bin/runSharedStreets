#!/usr/bin/env node

/* eslint no-await-in-loop: 0, no-loop-func: 0, no-continue: 0 */

const { execSync } = require('child_process');
const { appendFileSync } = require('fs');
const { join } = require('path');
const { sync: rimrafSync } = require('rimraf');
const { sync: mkdirpSync } = require('mkdirp');

const yargs = require('yargs');

const TILE_HIERARCHY_LEVEL = 8;

const INITIAL_SEG_LEN = 2; // miles
const MINIMUM_SEG_LEN = 0.015625; // miles â‰ˆ 83 feet

const INITIAL_SEARCH_RADIUS = 0;
const MAXIMUM_SEARCH_RADIUS = 15;
const SEARCH_RADIUS_STEP = 5;

const chunkerPath = join(__dirname, './geojson_linestrings_chunker');

const ROAD_TYPES = {
  ALL: 'ALL',
  MOTORWAY: 'MOTORWAY',
  SURFACE_STREETS: 'SURFACE_STREETS'
};

const ROAD_TYPES_LIST = [
  ROAD_TYPES.MOTORWAY,
  ROAD_TYPES.SURFACE_STREETS,
  ROAD_TYPES.ALL
];

const cliArgsSpec = {
  shapesGeoJSON: {
    demand: true,
    type: 'string'
  },
  outputDir: {
    demand: true,
    type: 'string'
  },
  clean: {
    type: 'boolean',
    description: 'Empty the outputDir before beginning.',
    default: false
  }
};

const { argv } = yargs
  .strict()
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false
  })
  .wrap(yargs.terminalWidth() / 1.618)
  .option(cliArgsSpec);

const { shapesGeoJSON, outputDir, clean } = argv;

const dataDir = `${join(process.cwd(), outputDir)}/`;

const shst = join(__dirname, '../node_modules/.bin/shst');

if (clean) {
  rimrafSync(dataDir);
}

mkdirpSync(dataDir);

const logFileStreamPath = join(dataDir, 'log');

const runSharedStreetsMatch = ({
  iteration,
  inFile,
  outFile,
  roadType = ROAD_TYPES.ALL,
  searchRadius = 10,
  snapIntersections = true,
  tileHierarchyLevel = TILE_HIERARCHY_LEVEL
}) => {
  const snapIntersectionsFlag = snapIntersections ? '--snap-intersections' : '';

  const roadTypeFlag = {
    [ROAD_TYPES.ALL]: '',
    [ROAD_TYPES.MOTORWAY]: '--match-motorway-only',
    [ROAD_TYPES.SURFACE_STREETS]: '--match-surface-streets-only'
  }[roadType];

  const cmd = `
    ${shst} match "${inFile}" \
      ${snapIntersectionsFlag} \
      ${roadTypeFlag} \
      --search-radius=${searchRadius} \
      --tile-hierarchy=${tileHierarchyLevel} \
      --follow-line-direction \
      --match-car \
      --out="${outFile}"
  `;

  const shst_match_output = execSync(cmd, {
    shell: true,
    stdio: ['pipe'],
    cwd: join(__dirname, '../')
  }).toString();

  appendFileSync(
    logFileStreamPath,
    `${JSON.stringify({
      iteration,
      shst_match_cmd: cmd.replace(/\s{1,}/g, ' '),
      shst_match_output
    })}\n`
  );

  console.log(shst_match_output);
};

(async () => {
  try {
    let iteration = 0;

    // TODO: Interatively chunk input GeoJSON file LineStrings
    let inFile = join(process.cwd(), shapesGeoJSON);

    // Iterate over segment lengths
    for (
      let segmentLength = INITIAL_SEG_LEN;
      segmentLength >= MINIMUM_SEG_LEN;
      segmentLength /= 2
    ) {
      const outBase = `chunked_gtfs_shapes._${segmentLength}_mi_`;
      const chunkedOutFilePath = join(dataDir, `${outBase}.geojson`);

      execSync(
        `${chunkerPath} --segmentLength=${segmentLength} < ${inFile} > ${chunkedOutFilePath}`
      );

      inFile = chunkedOutFilePath;

      // Iterate over searchRadius
      for (
        let searchRadius = INITIAL_SEARCH_RADIUS;
        searchRadius < MAXIMUM_SEARCH_RADIUS;
        searchRadius += SEARCH_RADIUS_STEP
      ) {
        // Iterate over road types
        ROAD_TYPES_LIST.forEach(roadType => {
          const snapIntersections =
            segmentLength * 5280 * 3.28084 > Math.E * searchRadius;

          const outFile = join(outputDir, `${outBase}.${++iteration}.geojson`);

          const shstMatchConfig = {
            inFile,
            outFile,
            roadType,
            searchRadius,
            snapIntersections
          };

          appendFileSync(
            logFileStreamPath,
            `${JSON.stringify({ iteration, segmentLength, shstMatchConfig })}\n`
          );

          runSharedStreetsMatch(shstMatchConfig);

          inFile = outFile.replace(/geojson$/, 'unmatched.geojson');
        });
      }
    }
  } catch (err) {
    console.log('STDERR');
    console.error(err.toString());
  }
})();

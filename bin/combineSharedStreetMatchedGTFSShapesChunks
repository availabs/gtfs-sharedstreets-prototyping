#!/usr/bin/env node

/* eslint no-use-before-define: 0 */

const { pipe, through } = require('mississippi');
const split = require('split2');
const turfHelpers = require('@turf/helpers');

let curShapeId = null;
let shape_output_features = null;

pipe(
  // createReadStream(shstMatchesNDJSON),
  process.stdin,
  split(JSON.parse),
  through.obj(async function loader(d, $, cb) {
    const {
      properties: {
        pp_shape_id: gtfs_shape_id,
        pp_seg_idx: gtfs_shape_seg_idx,
        pp_seg_num: gtfs_shape_num_segs,
        shstGeometryId,
        shstReferenceId
      },
      geometry: { coordinates: shstMatchCoords }
    } = d;

    if (curShapeId !== gtfs_shape_id) {
      if (curShapeId) {
        if (curShapeId > gtfs_shape_id) {
          console.error(
            'ERROR: Invariant broken. Input features not sorted by gtfs_shape_id.'
          );
          process.exit(1);
        }
        this.push(
          `${JSON.stringify(
            turfHelpers.featureCollection(shape_output_features, {
              id: curShapeId
            })
          )}\n`
        );
      }

      curShapeId = gtfs_shape_id;

      shape_output_features = [];
    }

    shape_output_features.push(
      turfHelpers.lineString(
        shstMatchCoords,
        {
          gtfs_shape_id,
          gtfs_shape_seg_idx,
          gtfs_shape_num_segs,
          shstGeometryId,
          shstReferenceId
        },
        { id: `${gtfs_shape_id}:${gtfs_shape_seg_idx}` }
      )
    );

    return cb();
  }),
  process.stdout,
  async err => {
    if (err) {
      console.error(err);
    }
  }
);
